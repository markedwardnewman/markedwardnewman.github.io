AngularJS
  Features:
    open-sourced
    developed mostly by Google
    MVC-type framework
    two-way data binding between models and views. This data binding allows for an automatic update on both sides whenever there is a data change
      both the Model and the View can update the data, thus the "two-way" descriptor
    directives, which allow developers to extend HTML by attaching special behaviors to parts of the DOM
      For example, ng-repeat is a directive that allows developers to repeat an element, making it very handy for doing things like printing an array of items to the page.
      can create your own
    Dependency injection - easily include services in modules
      For example, if a developer is writing a function and wants to use the $location service (a service that parses the URL in the browser address bar), all that’s required is to include it as a parameter of the function and Angular will make sure that an instance of that service is available to that function.
      This is also useful for injecting mock data into components which is a feature that helps make Angular highly testable.
    reusable View Components
    extend HTML with your own tags
    provides a services framework to allow easily backend-frontend server communication
    plain JavaScript
    
  Cons:
    Two-way data binding complicates debugging and hurts performance
    Angular 2 will have no backwards compatibility
    lacks server-side rendering, though workarounds exist
    
  
  When to use:
    When you are building a complex web front-end application and need a single modular framework to handle everything.
--------------------------------------------------------
React
  Features:
    developed mostly by Facebook
    easy to learn
    the fastest of the bunch
    can use it to create mobile applications
    describes itself as a JavaScript library for building user interfaces
    open-source
    the V in MVC
    supports server-side rendering
    abstracts the DOM away
      optimizes rendering and allows you to render React from node.js.
    implements a one-way reactive data flow that makes it easier to understand and use than other frameworks
    components are located in a single place. The advantages are easier debugging, code reuse and separation of concerns
    
  Cons:
    the absence of templates and the use of Components to generate the UI. What this essentially means is that your HTML lives inside your JavaScript.
    
    
    
  When to use:
    When you want a powerful View layer but don’t need an elaborate framework for the rest of your application or when you want a View layer to go with your Angular, Backbone, or Ember application. When you are trying to build an isomorphic web framework.
--------------------------------------------------------
Backbone
  Features:
    great strength is its versatility
    simple framework that fits into a single JavaScript file
    simple structure for their small web applications without bringing in a large framework like Angular or Ember
    full MVC framework
    routing
    Models allow for key-value binding and events for handling data changes
    Models (and Collections) can connect to RESTful APIs
    Views have declarative event handling
    Router does an excellent job of handling your URL and state management
    Everything you need to build a Single Page Application without offering too much and without unnecessary complexity.

  Pros:
  
  
  Cons:
    excessive “boilerplate” code in order to use the framework successfully?
    lack of server-side rendering
      Most search engine bots are unable to parse JavaScript, and when they happen upon a site that is using a framework that doesn’t support server-side rendering, they don’t receive the content
    
  When to use:
    small web applications without needing to bring in a large framework like Angular or Ember
    page / redering speed is a priority
    

--------------------------------------------------------
Ember
  Features:
    does not have a corporate sponsor
    aspires to provide a complete solution
    focus on programmer productivity
    makes many choices for you
    an MVC framework
    includes a templating and view engine that automatically updates when data changes
    extend HTML with your own tags
    a routing and model engine that knows how to work with your RESTful API
    
    
  Cons:
    a lot of generated code with this approach that can lead to difficulty with developers understanding exactly what’s going on
    built-in functionality, the learning curve is steep
    doesn’t support server-side rendering
  When to use:
    a framework that just works
    you do not need flexibility because you are on a tight budget or a hard deadline
    best suited for teams working on medium to large projects

--------------------------------------------------------

  Features:

  
  When to use:


--------------------------------------------------------

  Features:

  
  When to use:




  
  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  